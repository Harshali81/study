//BFS
#include <iostream> 
#include <queue> 
#include <omp.h> // Required for OpenMP directives 
using namespace std; 
 
class Node 
{ 
public: 
    Node *left, *right; 
    int data; 
}; 
 
class BreadthFS 
{ 
public: 
    Node *insert(Node *root, int data); // Insert a node into the tree 
    void bfs(Node *root);               // Perform parallel BFS 
}; 
 
// Insert a new node using level-order insertion 
Node *BreadthFS::insert(Node *root, int data) 
{ 
    if (!root) 
    { 
        root = new Node; 
        root->left = NULL; 
        root->right = NULL; 
        root->data = data; 
        return root; 
    } 
 
    std::queue<Node *> q; 
    q.push(root); 
 
    while (!q.empty()) 
    { 
        Node *current = q.front(); 
        q.pop(); 
 
        if (!current->left) 
        { 
            current->left = new Node; 
            current->left->left = NULL; 
            current->left->right = NULL; 
            current->left->data = data; 
            return root; 
        } 
        else 
        { 
            q.push(current->left); 
        } 
 
        if (!current->right) 
        { 
            current->right = new Node; 
            current->right->left = NULL; 
            current->right->right = NULL; 
            current->right->data = data; 
            return root; 
        } 
        else 
        { 
            q.push(current->right); 
        } 
    } 
    return root; // Ensures all control paths return a value 
} 
 
// Parallel BFS using OpenMP 
void BreadthFS::bfs(Node *root) 
{ 
    if (!root) 
        return; 
 
    queue<Node *> q; 
    q.push(root); 
 
    while (!q.empty()) 
    { 
        int level_size = q.size(); 
 
#pragma omp parallel for // Parallelize processing of nodes at the current level 
        for (int i = 0; i < level_size; i++) 
        { 
            Node *current = NULL; 
 
#pragma omp critical // Thread-safe access to the queue 
            { 
                current = q.front(); 
                q.pop(); 
                cout << current->data << "\t"; 
            } 
 
#pragma omp critical // Thread-safe insertion of children 
            { 
                if (current->left) 
                    q.push(current->left); 
                if (current->right) 
                    q.push(current->right); 
            } 
        } 
    } 
} 
 
int main() 
{ 
    BreadthFS bfs; 
    Node *root = NULL; 
    int data; 
    char choice; 
 
    cout << "\n\nName: Harshali Madake\nRoll No.28 \t Div.B\n\n"; 
 
    do 
    { 
        cout << "Enter data: "; 
        cin >> data; 
        root = bfs.insert(root, data); 
        cout << "Insert another node? (y/n): "; 
        cin >> choice; 
    } while (choice == 'y' || choice == 'Y'); 
 
    cout << "BFS Traversal:\n"; 
    bfs.bfs(root); 
 
    return 0; 
} 

//DFS
#include <iostream> 
#include <vector> 
#include <stack> 
#include <omp.h> 
using namespace std; 
const int MAX = 100000; 
vector<int> graph[MAX]; 
bool visited[MAX]; 
omp_lock_t lock[MAX]; 
void dfs(int start_node) 
{ 
    stack<int> s; 
    s.push(start_node); 
    while (!s.empty()) 
    { 
        int curr_node = s.top(); 
        s.pop(); 
        omp_set_lock(&lock[curr_node]); 
        if (!visited[curr_node]) 
        { 
            visited[curr_node] = true; 
            cout << curr_node << " "; 
        } 
        omp_unset_lock(&lock[curr_node]); 
#pragma omp parallel for shared(s) 
        for (int i = 0; i < graph[curr_node].size(); i++) 
        { 
            int adj_node = graph[curr_node][i]; 
            omp_set_lock(&lock[adj_node]); 
            if (!visited[adj_node]) 
            { 
#pragma omp critical 
                { 
                    s.push(adj_node); 
                } 
            } 
            omp_unset_lock(&lock[adj_node]); 
        } 
    } 
} 
int main() 
{ 
	cout << "\n\nName: Harshali Madake\nRoll No.28 \t Div.B\n\n";
    int n, m, start_node; 
    cout << "Enter number of nodes, edges, and the starting node: "; 
    cin >> n >> m >> start_node; 
    cout << "Enter pairs of connected edges (u v):\n"; 
    for (int i = 0; i < m; i++) 
    { 
        int u, v; 
        cin >> u >> v; 
        graph[u].push_back(v); 
        graph[v].push_back(u); 
    } 
#pragma omp parallel for 
    for (int i = 0; i < n; i++) 
    { 
        visited[i] = false; 
        omp_init_lock(&lock[i]); 
    } 
    cout << "\nDFS Traversal Order:\n"; 
    dfs(start_node); 
    cout << endl; 
for (int i = 0; i < n; i++) 
{ 
	omp_destroy_lock(&lock[i]);
}
return 0; 
} 
